// Vari치vel global para rastrear se o usu치rio j치 votou
var hasVoted = false;

// Fun칞칚o para lidar com o clique no bot칚o de "like"
function handleLikeClick(messageId) {
    // Verifica se o usu치rio j치 votou
    if (!hasVoted) {
        // Aqui voc칡 pode implementar a l칩gica para enviar uma requisi칞칚o ao servidor informando que o usu치rio curtiu a mensagem
        console.log('O usu치rio curtiu a mensagem com o ID:', messageId);

        // Atualiza o contador de likes
        var likeCountElement = document.querySelector('#messages-container [data-id="' + messageId + '"] .like-count');
        var currentLikes = parseInt(likeCountElement.textContent);
        likeCountElement.textContent = currentLikes + 1;

        // Define que o usu치rio j치 votou
        hasVoted = true;
    } else {
        // Se o usu치rio j치 votou, voc칡 pode exibir uma mensagem informando que s칩 칠 permitido um voto
        console.log('Voc칡 j치 votou nesta mensagem.');
    }
}

// Vari치vel para armazenar o conte칰do da 칰ltima mensagem
var lastMessageContent = '';

// Fun칞칚o para fazer uma requisi칞칚o AJAX para obter as mensagens
function fetchMessages() {
    fetch('/get_messages') // Rota no servidor para obter as mensagens
        .then(response => response.json())
        .then(messages => {
            const messagesContainer = document.getElementById('messages-container');
            messagesContainer.innerHTML = ''; // Limpa as mensagens existentes

            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.innerHTML = `
                            <h3>${message.title}</h3>
                            <p id="priority" class="priority-text" style="color: ${getColorByPriority(message.priority)};">Situa칞칚o: ${message.priority}</p>
                            <p>${message.content}</p>
                            <p>Data e Hora: ${message.datetime}</p>
                            <div class="like-container">
                                <button class="like-button" onclick="handleLikeClick(${message.id})">游녨</button>
                                <span class="like-count">0</span>
                            </div>
                        `;
                messagesContainer.appendChild(messageDiv);
            });

            if (messages.length > 0) {
                const latestMessage = messages[messages.length - 1];
                showNotificationWithUpdatedContent(latestMessage.content);
            }
        })
        .catch(error => {
            console.error('Erro ao obter as mensagens:', error);
            showNotificationWithUpdatedContent('Erro ao obter as mensagens.');
        });
}


// Atualiza as mensagens a cada 1 segundo (1000 milissegundos)
setInterval(fetchMessages, 1000);

// Fun칞칚o para exibir notifica칞칚o com conte칰do atualizado
function showNotificationWithUpdatedContent(messageContent) {
    if (messageContent !== lastMessageContent) {
        if (Notification.permission !== 'granted') {
            Notification.requestPermission();
        } else {
            var notification = new Notification('Mensagens', {
                body: 'Conte칰do atualizado: ' + messageContent,
            });
            lastMessageContent = messageContent;
        }
    }
}

// Exibir notifica칞칚o quando a p치gina for carregada
window.onload = function () {
    if (Notification.permission !== 'granted') {
        Notification.requestPermission();
    } else {
        var notification = new Notification('Mensagens', {
            body: 'A tela foi atualizada.',
        });
    }
};

// Fun칞칚o para fazer uma requisi칞칚o AJAX para obter as mensagens resolvidas
function fetchResolvedMessages() {
    fetch('/get_resolved_messages') // Rota no servidor para obter as mensagens resolvidas
        .then(response => response.json())
        .then(messages => {
            const resolvedMessagesContainer = document.getElementById('resolved-messages-container');
            resolvedMessagesContainer.innerHTML = ''; // Limpa as mensagens resolvidas existentes

            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.innerHTML = `
                            <h3>${message.title}</h3>
                            <p>${message.content}</p>
                            <p>Data e Hora: ${message.datetime}</p>
                            
                        `;
                resolvedMessagesContainer.appendChild(messageDiv);
            });
        })
        .catch(error => {
            console.error('Erro ao obter as mensagens resolvidas:', error);
        });
}

// Atualiza as mensagens resolvidas a cada 5 segundos (5000 milissegundos)
setInterval(fetchResolvedMessages, 5000);

// Chamar a fun칞칚o fetchResolvedMessages uma vez quando a p치gina for carregada
fetchResolvedMessages();

// Fun칞칚o para retornar a cor com base na prioridade
function getColorByPriority(priority) {
    switch (priority) {
        case 'com problema':
            return '#ff6600'; // Vermelho
        case 'manuten칞칚o':
            return '#fffb00'; // Azul
        case 'resolvido':
            return '#00cc00'; // Verde
        default:
            return '#000'; // Cor padr칚o
    }
}
